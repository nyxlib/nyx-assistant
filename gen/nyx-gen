#!/usr/bin/env python
########################################################################################################################

import os
import sys
import json
import shutil
import argparse

########################################################################################################################

LINE_BREAK = '\n'

########################################################################################################################

def generate_cmake_lists(driver_path, descr, override):

    ####################################################################################################################

    file_list = [os.path.join('.', 'src', f'device_{device["name"].lower()}.c') for device in sorted(descr['devices'].values(), key = lambda x: x['rank'])]

    ####################################################################################################################

    if descr['mode'] == 'posix':

        filename = 'CMakeLists.txt'

        template = f'''
########################################################################################################################

cmake_minimum_required(VERSION 3.5)

########################################################################################################################

project({descr['nodeName'].lower()} C)

set(CMAKE_C_STANDARD 99)

add_compile_options(-Wall -Wno-unknown-pragmas -Wno-unused-function -O3)

########################################################################################################################

find_package(NyxNode REQUIRED)

########################################################################################################################

set(SOURCE_FILES
    {f'{LINE_BREAK}    '.join(file_list)}
    ./src/glue.c
    ./src/main.c
)

########################################################################################################################

add_executable({descr['nodeName'].lower()} ${{SOURCE_FILES}})

target_include_directories({descr['nodeName'].lower()} PRIVATE ${{NYXNODE_INCLUDE_DIR}})

target_link_libraries({descr['nodeName'].lower()} PRIVATE ${{NYXNODE_{'STATIC' if descr['static'] else 'SHARED'}_LIB_PATH}})

########################################################################################################################
'''[1:]

    ####################################################################################################################

    if descr['mode'] == 'python':

        filename = 'CMakeLists.txt'

        template = f'''
########################################################################################################################

cmake_minimum_required(VERSION 3.5)

########################################################################################################################

project({descr['nodeName'].lower()} C)

set(CMAKE_C_STANDARD 99)

set(Python3_EXECUTABLE /usr/bin/python3)

add_compile_options(-DPY_SSIZE_T_CLEAN -Wall -Wno-unknown-pragmas -Wno-unused-function -O3)

########################################################################################################################

find_package(Threads REQUIRED)
find_package(Python3 REQUIRED COMPONENTS Interpreter Development)
find_package(NyxNode REQUIRED)

########################################################################################################################

set(SOURCE_FILES
    {f'{LINE_BREAK}    '.join(file_list)}
    ./src/glue.c
    ./src/main.c
)

########################################################################################################################

add_library({descr['nodeName'].lower()} SHARED ${{SOURCE_FILES}})

set_target_properties({descr['nodeName'].lower()} PROPERTIES PREFIX "")

target_include_directories({descr['nodeName'].lower()} PRIVATE ${{Python3_INCLUDE_DIRS}} ${{NYXNODE_INCLUDE_DIR}})

target_link_libraries({descr['nodeName'].lower()} PRIVATE Threads::Threads ${{Python3_LIBRARIES}} ${{NYXNODE_{'STATIC' if descr['static'] else 'SHARED'}_LIB_PATH}})

########################################################################################################################

include(GNUInstallDirs)

install(TARGETS {descr['nodeName'].lower()} LIBRARY DESTINATION ${{Python3_SITEARCH}})

install(FILES ./grc/{descr['nodeName'].lower()}.block.yml DESTINATION ${{CMAKE_INSTALL_DATADIR}}/gnuradio/grc/blocks/)

########################################################################################################################
'''[1:]

    ####################################################################################################################

    elif descr['mode'] == 'arduino-wifi':

        platform, board, ram = descr['board'].split('|')

        filename = 'platformio.ini'

        template = f'''
; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[env]
build_flags = -DNYX_HAS_WIFI -DNYX_RAM_SIZE={ram} -Wno-unused-function

lib_deps = PubSubClient, https://github.com/nyxlib/nyx-node.git

lib_ignore = FATFilesystem

monitor_speed = 115200

[env:nyx_node]
platform = {platform}
board = {board}
framework = arduino
'''[1:]

    ####################################################################################################################

    elif descr['mode'] == 'arduino-ethernet':

        platform, board, ram = descr['board'].split('|')

        filename = 'platformio.ini'

        template = f'''
; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[env]
build_flags = -DNYX_HAS_ETHERNET -DNYX_RAM_SIZE={ram} -Wno-unused-function

lib_deps = PubSubClient, arduino-libraries/Ethernet, https://github.com/nyxlib/nyx-node.git

lib_ignore = WiFiS3, FATFilesystem

monitor_speed = 115200

[env:nyx_node]
platform = {platform}
board = {board}
framework = arduino
'''[1:]

    ####################################################################################################################

    filename = os.path.join(driver_path, filename)

    if override or not os.path.isfile(filename):

        with open(filename, 'wt') as f:

            f.write(template)

########################################################################################################################

def generate_header(driver_path, descr):

    ####################################################################################################################

    ctor_list = []
    dtor_list = []
    vector_list = []
    python_callback_list = []

    for device in sorted(descr['devices'].values(), key = lambda x: x['rank']):

        ctor_list.append(f'void device_{device["name"].lower()}_initialize();')
        dtor_list.append(f'void device_{device["name"].lower()}_finalize();')

        for vector in sorted(device['vectors'].values(), key = lambda x: x['rank']):

            for vectorDef in sorted(vector['defs'].values(), key = lambda x: x['rank']):

                ns = f'{device["name"].lower()}_{vector["name"].lower()}_{vectorDef["name"].lower()}'

                if descr['mode'] == 'python' and vectorDef['callback']:

                    python_callback_list.append(f'extern PyObject *vector_def_{ns}_python_callback;')

                vector_list.append(f'extern nyx_dict_t *vector_def_{ns};')

            vector_list.append(f'extern nyx_dict_t *vector_{device["name"].lower()}_{vector["name"].lower()};')

    ####################################################################################################################

    template = f'''
/* !!! AUTOGENERATED FILE !!! */
/*--------------------------------------------------------------------------------------------------------------------*/

#ifndef INDI_NODE_{descr['nodeName'].upper()}_H
#define INDI_NODE_{descr['nodeName'].upper()}_H

/*--------------------------------------------------------------------------------------------------------------------*/

{'#include <Python.h>\n#include <pthread.h>\n' if descr['mode'] == 'python' else ''}#include <nyx_node.h>

/*--------------------------------------------------------------------------------------------------------------------*/

{f'{LINE_BREAK.join(python_callback_list)}\n\n' if len(python_callback_list) > 0 else ''}{LINE_BREAK.join(vector_list)}

/*--------------------------------------------------------------------------------------------------------------------*/

{LINE_BREAK.join(ctor_list)}

{LINE_BREAK.join(dtor_list)}

/*--------------------------------------------------------------------------------------------------------------------*/

void nyx_glue_initialize();

void nyx_glue_finalize();

/*--------------------------------------------------------------------------------------------------------------------*/

#endif /* INDI_NODE_{descr['nodeName'].upper()}_H */

/*--------------------------------------------------------------------------------------------------------------------*/
'''[1:]

    filename = os.path.join(driver_path, 'src', f'glue.{descr["HEAD_EXT"]}')

    with open(filename, 'wt') as f:

        f.write(template)

########################################################################################################################

def generate_main(driver_path, descr, override):

    ####################################################################################################################

    vector_list = []

    for device in sorted(descr['devices'].values(), key = lambda x: x['rank']):

        for vector in sorted(device['vectors'].values(), key = lambda x: x['rank']):

            vector_list.append(f'vector_{device["name"].lower()}_{vector["name"].lower()},')

    vector_list.append(f'{descr['NULL']},')

    ####################################################################################################################

    if descr['mode'] == 'posix':

        with open(os.path.join(driver_path, 'src', 'credentials.h'), 'wt') as f:

            f.write(f'#define MQTT_USERNAME {('"' + descr['mqttUsername'] + '"') if descr['enableMQTT'] else 'NULL'}\n#define MQTT_PASSWORD {('"' + descr['mqttPassword'] + '"') if descr['enableMQTT'] else 'NULL'}\n#define REDIS_PASSWORD {('"' + descr['redisPassword'] + '"') if descr['enableRedis'] else 'NULL'}\n')

        filename = 'main.c'

        template = f'''
/*--------------------------------------------------------------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include <signal.h>

#include "glue.h"
#include "credentials.h"

/*--------------------------------------------------------------------------------------------------------------------*/

static int volatile s_signo = 0;

static void signal_handler(int signo)
{{
    s_signo = signo;
}}

/*--------------------------------------------------------------------------------------------------------------------*/

int main()
{{
    /*----------------------------------------------------------------------------------------------------------------*/

    nyx_set_log_level(NYX_LOG_LEVEL_INFO);

    /*----------------------------------------------------------------------------------------------------------------*/

    nyx_memory_initialize();

    /*----------------------------------------------------------------------------------------------------------------*/

    if(nyx_validation_initialize() == false)
    {{
        printf("Error initializing validation\\n");

        goto _err;
    }}

    /*----------------------------------------------------------------------------------------------------------------*/

    nyx_glue_initialize();

    /*----------------------------------------------------------------------------------------------------------------*/

    nyx_dict_t *vector_list[] = {{
        {f'{LINE_BREAK}        '.join(vector_list)}
    }};

    /*----------------------------------------------------------------------------------------------------------------*/

    signal(SIGINT, signal_handler);
    signal(SIGTERM, signal_handler);

    nyx_node_t *node = nyx_node_initialize(
        "{descr['nodeName']}",
        vector_list,
        {('"' + descr['tcpURI'] + '"') if descr['enableTCP'] else 'NULL'},
        {('"' + descr['mqttURI'] + '"') if descr['enableMQTT'] else 'NULL'},
        MQTT_USERNAME,
        MQTT_PASSWORD,
        NULL,
        {('"' + descr['redisURI'] + '"') if descr['enableRedis'] else 'NULL'},
        REDIS_PASSWORD,
        3000,
        true,
        true
    );

    while(s_signo == 0)
    {{
        nyx_node_poll(node, {descr['nodeTimeout']});
    }}

    nyx_node_finalize(node, true);

    /*----------------------------------------------------------------------------------------------------------------*/

    nyx_glue_finalize();

    /*----------------------------------------------------------------------------------------------------------------*/

    if(nyx_validation_finalize() == false)
    {{
        printf("Error finalizing validation\\n");

        goto _err;
    }}

    /*----------------------------------------------------------------------------------------------------------------*/

_err:
    nyx_memory_finalize();

    /*----------------------------------------------------------------------------------------------------------------*/

    printf("Bye.\\n");

    /*----------------------------------------------------------------------------------------------------------------*/

    return 0;
}}

/*--------------------------------------------------------------------------------------------------------------------*/
'''[1:]

    ####################################################################################################################

    if descr['mode'] == 'python':

        python_callback_list = []

        register_python_callback_list = []

        for device in sorted(descr['devices'].values(), key = lambda x: x['rank']):

            for vector in sorted(device['vectors'].values(), key = lambda x: x['rank']):

                for vectorDef in sorted(vector['defs'].values(), key = lambda x: x['rank']):


                    ####################################################################################################

                    ns = f'{device["name"].lower()}_{vector["name"].lower()}_{vectorDef["name"].lower()}'

                    ####################################################################################################

                    if   vector['type'] == 'number' and 'd' in vectorDef['format']:
                        ctype = 'int'
                        setter = f'nyx_number_def_set_int((nyx_dict_t *) vector_def_{ns}, value);'
                    elif vector['type'] == 'number' and 'l' in vectorDef['format']:
                        ctype = 'lond'
                        setter = f'nyx_number_def_get_long((nyx_dict_t *) vector_def_{ns}, value);'
                    elif vector['type'] == 'number' and 'f' in vectorDef['format']:
                        ctype = 'double'
                        setter = f'nyx_number_def_set_double((nyx_dict_t *) vector_def_{ns}, value);'
                    elif vector['type'] == 'text':
                        ctype = 'STR_t'
                        setter = f'nyx_text_def_set((nyx_dict_t *) vector_def_{ns}, value);'
                    elif vector['type'] == 'switch':
                        ctype = 'int'
                        setter = f'nyx_switch_def_set((nyx_dict_t *) vector_def_{ns}, value);'
                    elif vector['type'] == 'light':
                        ctype = 'int'
                        setter = f'nyx_light_def_set((nyx_dict_t *) vector_def_{ns}, value);'
                    else:
                        continue

                    ####################################################################################################

                    if vectorDef['callback']:

                        python_callback_list.append(f'''
PyObject *vector_def_{ns}_python_callback = NULL;

static PyObject *_register_{ns}_callback(PyObject *self, PyObject *args)
{{
    Py_XDECREF(vector_def_{ns}_python_callback);

    if(!PyArg_ParseTuple(args, "O", &vector_def_{ns}_python_callback))
    {{
        return NULL;
    }}

    if(!PyCallable_Check(vector_def_{ns}_python_callback))
    {{
        PyErr_SetString(PyExc_TypeError, "Parameter must be callable");

        vector_def_{ns}_python_callback = NULL;

        return NULL;
    }}

    Py_XINCREF(vector_def_{ns}_python_callback);

    Py_RETURN_NONE;
}}
'''[1:])

                    python_callback_list.append(f'''
static PyObject *_set_{ns}_value(PyObject *self, PyObject *args)
{{
    if(worker_alive)
    {{
        {ctype} value;

        if(!PyArg_ParseTuple(args, "i", &value))
        {{
            return NULL;
        }}

        {setter}
    }}

    Py_RETURN_NONE;
}}'''[1:])

                    ####################################################################################################

                    if vectorDef['callback']:

                        register_python_callback_list.append(f'{{"register_{ns}_callback", _register_{ns}_callback, METH_VARARGS, "Registers the callback for {device["name"]}::{vector["name"]}::{vectorDef["name"]}"}},')

                    register_python_callback_list.append(f'{{"set_{ns}_value", _set_{ns}_value, METH_VARARGS, "Sets the value for {device["name"]}::{vector["name"]}::{vectorDef["name"]}"}},')

                    ####################################################################################################

        with open(os.path.join(driver_path, 'src', 'credentials.h'), 'wt') as f:

            f.write(f'#define MQTT_USERNAME {('"' + descr['mqttUsername'] + '"') if descr['enableMQTT'] else 'NULL'}\n#define MQTT_PASSWORD {('"' + descr['mqttPassword'] + '"') if descr['enableMQTT'] else 'NULL'}\n#define REDIS_PASSWORD {('"' + descr['redisPassword'] + '"') if descr['enableRedis'] else 'NULL'}\n')

        filename = 'main.c'

        template = f'''
/*--------------------------------------------------------------------------------------------------------------------*/

#include "glue.h"
#include "credentials.h"

/*--------------------------------------------------------------------------------------------------------------------*/

static nyx_node_t *node = NULL;

/*--------------------------------------------------------------------------------------------------------------------*/

static pthread_t worker_thread = 0;

/*--*/ volatile bool worker_alive = false;

/*--------------------------------------------------------------------------------------------------------------------*/

static void *worker_routine(void *arg)
{{
    /*----------------------------------------------------------------------------------------------------------------*/

    nyx_set_log_level(NYX_LOG_LEVEL_INFO);

    /*----------------------------------------------------------------------------------------------------------------*/

    nyx_memory_initialize();

    /*----------------------------------------------------------------------------------------------------------------*/

    nyx_glue_initialize();

    /*----------------------------------------------------------------------------------------------------------------*/

    nyx_dict_t *vector_list[] = {{
        {f'{LINE_BREAK}        '.join(vector_list)}
    }};

    /*----------------------------------------------------------------------------------------------------------------*/

    node = nyx_node_initialize(
        "{descr['nodeName']}",
        vector_list,
        {('"' + descr['tcpURI'] + '"') if descr['enableTCP'] else 'NULL'},
        {('"' + descr['mqttURI'] + '"') if descr['enableMQTT'] else 'NULL'},
        MQTT_USERNAME,
        MQTT_PASSWORD,
        NULL,
        {('"' + descr['redisURI'] + '"') if descr['enableRedis'] else 'NULL'},
        REDIS_PASSWORD,
        3000,
        true,
        true
    );

    for(worker_alive = true; worker_alive;)
    {{
        nyx_node_poll(node, {descr['nodeTimeout']});
    }}

    nyx_node_finalize(node, true);

    /*----------------------------------------------------------------------------------------------------------------*/

    nyx_glue_finalize();

    /*----------------------------------------------------------------------------------------------------------------*/

    nyx_memory_finalize();

    /*----------------------------------------------------------------------------------------------------------------*/

    return NULL;
}}

/*--------------------------------------------------------------------------------------------------------------------*/

static PyObject *worker_start(PyObject *self, PyObject *noargs)
{{
    if(worker_thread == 0)
    {{
        if(pthread_create(&worker_thread, NULL, worker_routine, NULL) != 0x00)
        {{
            PyErr_SetString(PyExc_RuntimeError, "Failed to start Nyx worker thread");

            worker_alive = false;

            return NULL;
        }}
        else
        {{
            worker_alive = true;

            Py_RETURN_NONE;
        }}
    }}

    Py_RETURN_NONE;
}}

/*--------------------------------------------------------------------------------------------------------------------*/

static PyObject *worker_stop(PyObject *self, PyObject *noargs)
{{
    if(worker_thread != 0)
    {{
        worker_alive = false;

        if(pthread_join(worker_thread, NULL) != 0x00)
        {{
            PyErr_SetString(PyExc_RuntimeError, "Failed to stop Nyx worker thread");

            worker_thread = 0;

            return NULL;
        }}
        else
        {{
            worker_thread = 0;

            Py_RETURN_NONE;
        }}
    }}

    Py_RETURN_NONE;
}}

/*--------------------------------------------------------------------------------------------------------------------*/

static PyObject *send_message(PyObject *self, PyObject *args)
{{
    STR_t device;
    STR_t message;

    if(!PyArg_ParseTuple(args, "ss", &device, &message))
    {{
        return NULL;
    }}

    nyx_node_send_message(node, device, message);

    Py_RETURN_NONE;
}}

/*--------------------------------------------------------------------------------------------------------------------*/

{f'{LINE_BREAK}{LINE_BREAK}/*--------------------------------------------------------------------------------------------------------------------*/{LINE_BREAK}{LINE_BREAK}'.join(python_callback_list)}

/*--------------------------------------------------------------------------------------------------------------------*/

static PyMethodDef MethodDefs[] = {{
    {f'{LINE_BREAK}    '.join(register_python_callback_list)}
    {{"send_message", send_message, METH_VARARGS, "Send a message to a device."}},
    {{"start", worker_start, METH_NOARGS, "Starts the node"}},
    {{"stop", worker_stop, METH_NOARGS, "Stops the node"}},
    {{NULL, NULL, 0, NULL}},
}};

/*--------------------------------------------------------------------------------------------------------------------*/

static void ModuleFree(void *module)
{{
    worker_stop(NULL, NULL);
}}

/*--------------------------------------------------------------------------------------------------------------------*/

static struct PyModuleDef ModuleDef = {{
    PyModuleDef_HEAD_INIT,
    "{descr['nodeName']}",
    NULL,
    -1,
    MethodDefs,
    NULL,
    NULL,
    NULL,
    ModuleFree
}};

/*--------------------------------------------------------------------------------------------------------------------*/

PyMODINIT_FUNC PyInit_{descr['nodeName']}()
{{
    /*----------------------------------------------------------------------------------------------------------------*/

    PyObject *module = PyModule_Create(&ModuleDef);

    if(module != NULL)
    {{
		PyModule_AddIntConstant(module, "NYX_STATE_IDLE", NYX_STATE_IDLE);
		PyModule_AddIntConstant(module, "NYX_STATE_OK", NYX_STATE_OK);
		PyModule_AddIntConstant(module, "NYX_STATE_BUSY", NYX_STATE_BUSY);
		PyModule_AddIntConstant(module, "NYX_STATE_ALERT", NYX_STATE_ALERT);

		PyModule_AddIntConstant(module, "NYX_ONOFF_ON", NYX_ONOFF_ON);
		PyModule_AddIntConstant(module, "NYX_ONOFF_OFF", NYX_ONOFF_OFF);
    }}

    /*----------------------------------------------------------------------------------------------------------------*/

    return module;
}}

/*--------------------------------------------------------------------------------------------------------------------*/
'''[1:]

    ####################################################################################################################

    elif descr['mode'] == 'arduino-wifi':

        with open(os.path.join(driver_path, 'src', 'credentials.hpp'), 'wt') as f:

            f.write(f'#define WIFI_SSID "{descr["wifiSSID"]}"\n#define WIFI_PASSWORD "{descr["wifiPassword"]}"\n#define MQTT_USERNAME "{('"' + descr['mqttUsername'] + '"') if descr['enableMQTT'] else 'nullptr'}"\n#define MQTT_PASSWORD {('"' + descr['mqttPassword'] + '"') if descr['enableMQTT'] else 'nullptr'}\n#define REDIS_PASSWORD {('"' + descr['redisPassword'] + '"') if descr['enableRedis'] else 'nullptr'}\n')

        filename = 'main.cpp'

        template = f'''
/*--------------------------------------------------------------------------------------------------------------------*/

#include <Arduino.h>

#ifdef ARDUINO_ARCH_ESP8266
#  include <ESP8266WiFi.h>
#else
#  include <WiFi.h>
#endif

#include "glue.hpp"
#include "credentials.hpp"

/*--------------------------------------------------------------------------------------------------------------------*/

static nyx_node_t *node = nullptr;

/*--------------------------------------------------------------------------------------------------------------------*/

void setup()
{{
    /*----------------------------------------------------------------------------------------------------------------*/

    Serial.begin(115200);

    while(!Serial)
    {{
        Serial.print(".");

        delay(50);
    }}

    /*----------------------------------------------------------------------------------------------------------------*/

    #ifdef WIFI_STA
    WiFi.mode(WIFI_STA);
    #endif

    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);

    while(WiFi.status() != WL_CONNECTED)
    {{
        Serial.print(".");

        delay(100);
    }}

    /*----------------------------------------------------------------------------------------------------------------*/

    Serial.print('\\n');

    nyx_set_log_level(NYX_LOG_LEVEL_INFO);

    NYX_LOG_INFO("IP: %s", WiFi.localIP().toString().c_str());

    /*----------------------------------------------------------------------------------------------------------------*/

    nyx_memory_initialize();

    /*----------------------------------------------------------------------------------------------------------------*/

    nyx_glue_initialize();

    /*----------------------------------------------------------------------------------------------------------------*/

    static nyx_dict_t *vector_list[] = {{
        {f'{LINE_BREAK}        '.join(vector_list)}
    }};

    /*----------------------------------------------------------------------------------------------------------------*/

    node = nyx_node_initialize(
        "{descr['nodeName']}",
        vector_list,
        {('"' + descr['tcpURI'] + '"') if descr['enableTCP'] else 'nullptr'},
        {('"' + descr['mqttURI'] + '"') if descr['enableMQTT'] else 'nullptr'},
        MQTT_USERNAME,
        MQTT_PASSWORD,
        NULL,
        {('"' + descr['redisURI'] + '"') if descr['enableRedis'] else 'nullptr'},
        REDIS_PASSWORD,
        3000,
        true,
        false
    );

    /*----------------------------------------------------------------------------------------------------------------*/
}}

/*--------------------------------------------------------------------------------------------------------------------*/

void loop()
{{
    if(node != nullptr)
    {{
        nyx_node_poll(node, {descr['nodeTimeout']});
    }}
}}

/*--------------------------------------------------------------------------------------------------------------------*/
'''[1:]

    ####################################################################################################################

    elif descr['mode'] == 'arduino-ethernet':

        with open(os.path.join(driver_path, 'src', 'credentials.hpp'), 'wt') as f:

            f.write(f'#define MQTT_USERNAME "{('"' + descr['mqttUsername'] + '"') if descr['enableMQTT'] else 'nullptr'}"\n#define MQTT_PASSWORD {('"' + descr['mqttPassword'] + '"') if descr['enableMQTT'] else 'nullptr'}\n#define REDIS_PASSWORD {('"' + descr['redisPassword'] + '"') if descr['enableRedis'] else 'nullptr'}\n')

        template = f'''
/*--------------------------------------------------------------------------------------------------------------------*/

#include <Arduino.h>
#include <Ethernet.h>

#include "glue.hpp"
#include "credentials.hpp"

/*--------------------------------------------------------------------------------------------------------------------*/

#define ETHERNET_CS_PIN {descr['ethernetCSPin']}

/*--------------------------------------------------------------------------------------------------------------------*/

static nyx_node_t *node = nullptr;

/*--------------------------------------------------------------------------------------------------------------------*/

void setup()
{{
    /*----------------------------------------------------------------------------------------------------------------*/

    Serial.begin(115200);

    while(!Serial)
    {{
        Serial.print(".");

        delay(50);
    }}

    /*----------------------------------------------------------------------------------------------------------------*/

    byte ethernet_mac_addr[6];

    nyx_generate_mac_addr(ethernet_mac_addr, 0xEF, 0x02, "{descr['nodeName']}");

    /*----------------------------------------------------------------------------------------------------------------*/

    Ethernet.init(ETHERNET_CS_PIN);

    Ethernet.begin(ethernet_mac_addr);

    if(Ethernet.hardwareStatus() == EthernetNoHardware)
    {{
        Serial.print('\\n');

        NYX_LOG_ERROR("Ethernet shield was not found. Sorry, can't run without hardware. :(");

        for(;;)
        {{
            delay(1);
        }}
    }}

    /*----------------------------------------------------------------------------------------------------------------*/

    Serial.print('\\n');

    nyx_set_log_level(NYX_LOG_LEVEL_INFO);

    NYX_LOG_INFO("IP: %s", Ethernet.localIP().toString().c_str());

    /*----------------------------------------------------------------------------------------------------------------*/

    nyx_memory_initialize();

    /*----------------------------------------------------------------------------------------------------------------*/

    nyx_glue_initialize();

    /*----------------------------------------------------------------------------------------------------------------*/

    static nyx_dict_t *vector_list[] = {{
        {f'{LINE_BREAK}        '.join(vector_list)}
    }};

    /*----------------------------------------------------------------------------------------------------------------*/

    node = nyx_node_initialize(
        "{descr['nodeName']}",
        vector_list,
        {('"' + descr['tcpURI'] + '"') if descr['enableTCP'] else 'nullptr'},
        {('"' + descr['mqttURI'] + '"') if descr['enableMQTT'] else 'nullptr'},
        MQTT_USERNAME,
        MQTT_PASSWORD,
        NULL,
        {('"' + descr['redisURI'] + '"') if descr['enableRedis'] else 'nullptr'},
        REDIS_PASSWORD,
        3000,
        true,
        false
    );

    /*----------------------------------------------------------------------------------------------------------------*/
}}

/*--------------------------------------------------------------------------------------------------------------------*/

void loop()
{{
    if(node != nullptr)
    {{
        nyx_node_poll(node, {descr['nodeTimeout']});
    }}
}}

/*--------------------------------------------------------------------------------------------------------------------*/
'''[1:]

    ####################################################################################################################

    else:

        raise ValueError('Invalid mode')

    ####################################################################################################################

    filename = os.path.join(driver_path, 'src', f'main.{descr['SRC_EXT']}')

    if override or not os.path.isfile(filename):

        with open(filename, 'wt') as f:

            f.write(template)

########################################################################################################################

def generate_python_notifier(descr, device, vector, vectorDef):

    ####################################################################################################################

    ns = f'{device["name"].lower()}_{vector["name"].lower()}_{vectorDef["name"].lower()}'

    ####################################################################################################################

    if descr['mode'] == 'python':
        if   vector['type'] == 'number' and 'd' in vectorDef['format']:
            args = 'Py_BuildValue("(i)", nyx_number_def_get_int((nyx_dict_t *) def_vector))'
        elif vector['type'] == 'number' and 'l' in vectorDef['format']:
            args = 'Py_BuildValue("(l)", nyx_number_def_get_long((nyx_dict_t *) def_vector))'
        elif vector['type'] == 'number' and 'f' in vectorDef['format']:
            args = 'Py_BuildValue("(d)", nyx_number_def_get_double((nyx_dict_t *) def_vector))'
        elif vector['type'] == 'text':
            args = 'Py_BuildValue("(s)", nyx_text_def_get((nyx_dict_t *) def_vector))'
        elif vector['type'] == 'switch':
            args = 'Py_BuildValue("(i)", nyx_switch_def_get((nyx_dict_t *) def_vector))'
        else:
            return '    /* TO BE IMPLEMENTED */'
    else:
        return '    /* TO BE IMPLEMENTED */'

    ####################################################################################################################

    return f'''
    if(modified && vector_def_{ns}_python_callback != NULL)
    {{
        /*------------------------------------------------------------------------------------------------------------*/
        /* !!! AUTOGENERATED CODE !!!                                                                                 */
        /*------------------------------------------------------------------------------------------------------------*/

        PyGILState_STATE gstate = PyGILState_Ensure();

        PyObject *args = {args};

        PyObject *result = PyObject_CallObject(vector_def_{ns}_python_callback, args);

        Py_DECREF(args);

        if(result == NULL) {{
            PyErr_Print();
        }} else {{
            Py_DECREF(result);
        }}

        PyGILState_Release(gstate);

        /*------------------------------------------------------------------------------------------------------------*/
        /* USER FREE CODE                                                                                             */
        /*------------------------------------------------------------------------------------------------------------*/

        /* TO BE IMPLEMENTED */

        /*------------------------------------------------------------------------------------------------------------*/
    }}
'''[1: -1]

########################################################################################################################

def generate_devices(driver_path, descr, override):

    ctor_list = []
    dtor_list = []

    vector_list1 = []
    vector_list2 = []

    ####################################################################################################################

    for device in sorted(descr['devices'].values(), key = lambda x: x['rank']):

        ################################################################################################################

        ctor_list.append(f'device_{device["name"].lower()}_initialize();')
        dtor_list.append(f'device_{device["name"].lower()}_finalize();')

        ################################################################################################################

        callback_list1 = []
        callback_list2 = []

        for vector in sorted(device['vectors'].values(), key = lambda x: x['rank']):

            vector_def_list1 = []
            vector_def_list2 = []

            for vectorDef in sorted(vector['defs'].values(), key = lambda x: x['rank']):

                ns = f'{device["name"].lower()}_{vector["name"].lower()}_{vectorDef["name"].lower()}'

                ########################################################################################################
                # NUMBER                                                                                               #
                ########################################################################################################

                if vector['type'] == 'number':

                    vector_def_list2.append(f'vector_def_{ns} = nyx_number_def_new("{vectorDef["name"]}", "{vectorDef["label"]}", "{vectorDef["format"]}", {vectorDef["min"]}, {vectorDef["max"]}, {vectorDef["step"]}, {vectorDef["value"]});')

                ########################################################################################################
                # TEXT                                                                                                 #
                ########################################################################################################

                if vector['type'] == 'text':

                    vector_def_list2.append(f'vector_def_{ns} = nyx_text_def_new("{vectorDef["name"]}", "{vectorDef["label"]}", "{vectorDef["value"]}");')

                ########################################################################################################
                # LIGHT                                                                                                #
                ########################################################################################################

                if vector['type'] == 'light':

                    vector_def_list2.append(f'vector_def_{ns} = nyx_light_def_new("{vectorDef["name"]}", "{vectorDef["label"]}", {vectorDef["value"]});')

                ########################################################################################################
                # SWITCH                                                                                               #
                ########################################################################################################

                if vector['type'] == 'switch':

                    vector_def_list2.append(f'vector_def_{ns} = nyx_switch_def_new("{vectorDef["name"]}", "{vectorDef["label"]}", {vectorDef["value"]});')

                ########################################################################################################
                # BLOB                                                                                                 #
                ########################################################################################################

                if vector['type'] == 'blob':

                    vector_def_list2.append(f'vector_def_{ns} = nyx_blob_def_new("{vectorDef["name"]}", "{vectorDef["label"]}", {vectorDef["value"]});')

                ########################################################################################################

                vector_list1.append(f'nyx_dict_t *vector_def_{ns} = {descr['NULL']};')

                vector_def_list1.append(f'vector_def_{ns},')

                ########################################################################################################

                if vectorDef['callback']:

                    callback_list1.append(f'static void _{vector["name"].lower()}_{vectorDef["name"].lower()}_callback(struct nyx_object_s *def_vector, bool modified)\n{{\n{generate_python_notifier(descr, device, vector, vectorDef)}\n}}')

                    callback_list2.append(f'vector_def_{ns}->base.in_callback = _{vector["name"].lower()}_{vectorDef["name"].lower()}_callback;')

            ############################################################################################################

            vector_list1.append(f'nyx_dict_t *vector_{device["name"].lower()}_{vector["name"].lower()} = {descr['NULL']};')

            vector_def_list1.append(f'{descr['NULL']},')

            ############################################################################################################

            if vector['callback']:

                callback_list1.append(f'static void _{vector["name"].lower()}_callback(struct nyx_object_s *vector, bool modified)\n{{\n    /* TO BE IMPLEMENTED */\n}}')

                callback_list2.append(f'vector_{device["name"].lower()}_{vector["name"].lower()}->base.in_callback = _{vector["name"].lower()}_callback;')

            ############################################################################################################
            # OPTIONS AND DEFINITIONS                                                                                  #
            ############################################################################################################

            option_list = [
                f'.label = {"\"" + vector["label"] + "\"" if vector["label"] else descr['NULL']},',
                f'.group = {"\"" + vector["group"] + "\"" if vector["group"] else descr['NULL']},',
                f'.timeout = {       vector["timeout"]        if vector["timeout"] else      "0"     },',
                f'.message = {"\"" + vector["message"] + "\"" if vector["message"] else descr['NULL']},',
            ]

            ############################################################################################################

            defs_and_opts = f'''{f'{LINE_BREAK}    '.join(vector_def_list2)}

    nyx_dict_t *{device['name'].lower()}_{vector['name'].lower()}_defs[] = {{
        {f'{LINE_BREAK}        '.join(vector_def_list1)}
    }};

    nyx_opts_t {device['name'].lower()}_{vector['name'].lower()}_opts = {{
        {f'{LINE_BREAK}        '.join(option_list)}
    }};
'''

            ############################################################################################################
            # VECTOR                                                                                                   #
            ############################################################################################################

            vector_list2.append(f'/* VECTOR {device["name"].upper()}::{vector["name"].upper()} */\n')

            ############################################################################################################
            # NUMBER                                                                                                   #
            ############################################################################################################

            if vector['type'] == 'number':

                vector_list2.append(f'''{defs_and_opts}
    vector_{device['name'].lower()}_{vector['name'].lower()} = nyx_number_def_vector_new(
        "{device['name']}",
        "{vector['name']}",
        {vector['state']},
        {vector['perm']},
        {device['name'].lower()}_{vector['name'].lower()}_defs,
        &{device['name'].lower()}_{vector['name'].lower()}_opts
    );
''')

            ############################################################################################################
            # TEXT                                                                                                     #
            ############################################################################################################

            elif vector['type'] == 'text':

                vector_list2.append(f'''{defs_and_opts}
    vector_{device['name'].lower()}_{vector['name'].lower()} = nyx_text_def_vector_new(
        "{device['name']}",
        "{vector['name']}",
        {vector['state']},
        {vector['perm']},
        {device['name'].lower()}_{vector['name'].lower()}_defs,
        &{device['name'].lower()}_{vector['name'].lower()}_opts
    );
''')

            ############################################################################################################
            # LIGHT                                                                                                    #
            ############################################################################################################

            elif vector['type'] == 'light':

                vector_list2.append(f'''{defs_and_opts}
    vector_{device['name'].lower()}_{vector['name'].lower()} = nyx_light_def_vector_new(
        "{device['name']}",
        "{vector['name']}",
        {vector['state']},
        {device['name'].lower()}_{vector['name'].lower()}_defs,
        &{device['name'].lower()}_{vector['name'].lower()}_opts
    );
''')

            ############################################################################################################
            # SWITCH                                                                                                   #
            ############################################################################################################

            elif vector['type'] == 'switch':

                vector_list2.append(f'''{defs_and_opts}
    vector_{device['name'].lower()}_{vector['name'].lower()} = nyx_switch_def_vector_new(
        "{device['name']}",
        "{vector['name']}",
        {vector['state']},
        {vector['perm']},
        {vector['rule']},
        {device['name'].lower()}_{vector['name'].lower()}_defs,
        &{device['name'].lower()}_{vector['name'].lower()}_opts
    );
''')

            ############################################################################################################
            # BLOB                                                                                                     #
            ############################################################################################################

            elif vector['type'] == 'blob':

                vector_list2.append(f'''{defs_and_opts}
    vector_{device['name'].lower()}_{vector['name'].lower()} = nyx_blob_def_vector_new(
        "{device['name']}",
        "{vector['name']}",
        {vector['state']},
        {vector['perm']},
        {device['name'].lower()}_{vector['name'].lower()}_defs,
        &{device['name'].lower()}_{vector['name'].lower()}_opts
    );
''')

            ############################################################################################################

            if device['disabled'] or vector['disabled']:

                vector_list2.append(f'vector_{device["name"].lower()}_{vector["name"].lower()}->base.flags |= INDI_FLAGS_XXXX_DISABLED;\n')

        ################################################################################################################

        template = f'''
/*--------------------------------------------------------------------------------------------------------------------*/

#include "glue.{descr['HEAD_EXT']}"

/*--------------------------------------------------------------------------------------------------------------------*/

{f'{LINE_BREAK}{LINE_BREAK}/*--------------------------------------------------------------------------------------------------------------------*/{LINE_BREAK}{LINE_BREAK}'.join(callback_list1).rstrip() if callback_list1 else '/* TO BE IMPLEMENTED */'}

/*--------------------------------------------------------------------------------------------------------------------*/

void device_{device['name'].lower()}_initialize()
{{
    {f'{LINE_BREAK}    '.join(callback_list2) + f'{LINE_BREAK}{LINE_BREAK}    /* TO BE IMPLEMENTED */' if callback_list2 else '/* TO BE IMPLEMENTED */'}
}}

/*--------------------------------------------------------------------------------------------------------------------*/

void device_{device['name'].lower()}_finalize()
{{
    /* TO BE IMPLEMENTED */
}}

/*--------------------------------------------------------------------------------------------------------------------*/
'''[1:]

        filename = os.path.join(driver_path, 'src', f'device_{device["name"].lower()}.cpp' if descr['mode'] != 'posix' and descr['mode'] != 'python' else f'device_{device["name"].lower()}.c')

        if override or not os.path.isfile(filename):

            with open(filename, 'wt') as f:

                f.write(template)

    ####################################################################################################################

    template = f'''
/* !!! AUTOGENERATED FILE !!! */
/*--------------------------------------------------------------------------------------------------------------------*/

#include "glue.{descr['HEAD_EXT']}"

/*--------------------------------------------------------------------------------------------------------------------*/

{LINE_BREAK.join(vector_list1)}

/*--------------------------------------------------------------------------------------------------------------------*/

void nyx_glue_initialize()
{{
    /*----------------------------------------------------------------------------------------------------------------*/
    /* INITIALIZE VECTORS                                                                                             */
    /*----------------------------------------------------------------------------------------------------------------*/

    {f'{LINE_BREAK}    '.join(vector_list2).rstrip()}

    /*----------------------------------------------------------------------------------------------------------------*/
    /* INITIALIZE HARDWARE                                                                                            */
    /*----------------------------------------------------------------------------------------------------------------*/

    {f'{LINE_BREAK}    '.join(ctor_list).rstrip()}

    /*----------------------------------------------------------------------------------------------------------------*/
}}

/*--------------------------------------------------------------------------------------------------------------------*/

void nyx_glue_finalize()
{{
    /*----------------------------------------------------------------------------------------------------------------*/
    /* FINALIZE HARDWARE                                                                                              */
    /*----------------------------------------------------------------------------------------------------------------*/

    {f'{LINE_BREAK}    '.join(dtor_list).rstrip()}

    /*----------------------------------------------------------------------------------------------------------------*/
}}

/*--------------------------------------------------------------------------------------------------------------------*/
'''[1:]

    filename = os.path.join(driver_path, 'src', f'glue.{descr['SRC_EXT']}')

    with open(filename, 'wt') as f:

        f.write(template)

########################################################################################################################

def generate_block(driver_path, descr):

    ####################################################################################################################

    parameter_list = []

    callback_list = []

    for device in sorted(descr['devices'].values(), key = lambda x: x['rank']):

        for vector in sorted(device['vectors'].values(), key = lambda x: x['rank']):

            for vectorDef in sorted(vector['defs'].values(), key = lambda x: x['rank']):

                if vectorDef['callback']:

                    ####################################################################################################

                    ns = f'{device["name"].lower()}_{vector["name"].lower()}_{vectorDef["name"].lower()}'

                    ####################################################################################################

                    parameter_list.append(f'''
  - id: {ns}_variable
    label: \'{device["name"]}:{vector["name"]}:{vectorDef["name"]}\'
    dtype: _multiline
    default: \'\'
'''[1:])

                    ####################################################################################################

                    callback_list.append(f'''
    def _{ns}_callback(value):
        ${{{ns}_variable.replace('\\n', '\\n    ') if {ns}_variable.strip() else 'pass'}}

    {descr['nodeName'].lower()}.register_{ns}_callback(_{ns}_callback)
'''[1:])

    ####################################################################################################################

    template = f'''
id: nyx-{descr['nodeName'].replace('_', '-').lower()}
label: "Nyx {descr['nodeName']}"
category: '[Nyx]/{descr['nodeName']}'
flags: [ python ]


parameters:
{'\n'.join(parameter_list)}

templates:
  imports: |
    import {descr['nodeName']}

  make: |
    None

    {descr['nodeName']}.start()

{'\n'.join(callback_list)}

file_format: 1
'''[1:]

    ####################################################################################################################

    filename = os.path.join(driver_path, 'grc', f'{descr['nodeName'].lower()}.block.yml')

    with open(filename, 'wt') as f:

        f.write(template)

########################################################################################################################

def main():

    ####################################################################################################################

    parser = argparse.ArgumentParser(description = 'Generate an Nyx driver skeleton from a description file')

    parser.add_argument('--override-project', action = 'store_true', help = 'Override the project output folder')

    parser.add_argument('--override-device', action = 'store_true', help = 'Override the device files')

    parser.add_argument('--override-main', action = 'store_true', help = 'Override main.c')

    parser.add_argument('--override-cmake', action = 'store_true', help = 'Override CMake')

    parser.add_argument('--output', type = str, default = '.', help = 'Skeleton output path')

    parser.add_argument('--descr', type = str, required = True, help = 'Driver description file')

    args = parser.parse_args()

    ####################################################################################################################

    try:

        with open(args.descr, 'rt') as f:

            descr = json.load(f)

    except IOError:

        return 1

    ####################################################################################################################

    if descr['mode'] == 'posix' or descr['mode'] == 'python':
        descr['NULL'] = 'NULL'
        descr['SRC_EXT'] = 'c'
        descr['HEAD_EXT'] = 'h'
    else:
        descr['NULL'] = 'nullptr'
        descr['SRC_EXT'] = 'cpp'
        descr['HEAD_EXT'] = 'hpp'

    ####################################################################################################################

    driver_path = os.path.join(args.output, descr['nodeName'])

    ####################################################################################################################

    if os.path.isdir(driver_path) and args.override_project:

        shutil.rmtree(driver_path)

    ####################################################################################################################

    if descr['mode'] == 'python':

        # noinspection PyTypeChecker
        os.makedirs(os.path.join(driver_path, 'grc'), exist_ok = True)

    # noinspection PyTypeChecker
    os.makedirs(os.path.join(driver_path, 'src'), exist_ok = True)

    ####################################################################################################################

    generate_cmake_lists(driver_path, descr, args.override_cmake)

    generate_header(driver_path, descr)

    generate_main(driver_path, descr, args.override_main)

    generate_devices(driver_path, descr, args.override_device)

    generate_block(driver_path, descr)

    ####################################################################################################################

    return 0

########################################################################################################################

if __name__ == "__main__":

    sys.exit(main())

########################################################################################################################
