#!/usr/bin/env python
########################################################################################################################

import os
import sys
import json
import shutil
import argparse

########################################################################################################################

def generateCMakeLists(driverPath, descr):

    ####################################################################################################################

    fileList = [os.path.join('.', 'src', f'device_{device['name'].lower()}.c') for device in descr['devices'].values()]

    ####################################################################################################################

    template = f'''
########################################################################################################################

cmake_minimum_required(VERSION 3.5)

########################################################################################################################

project({descr['nodeName'].lower()} C)

set(CMAKE_C_STANDARD 99)

add_compile_options(-Wall -Wno-unknown-pragmas -O3)

########################################################################################################################

find_package(LibXml2 REQUIRED)
#find_package(LibIndiNode REQUIRED)
set(LIBINDINODE_INCLUDE_DIR "/home/jodier/workspace/indi-node/src")
set(LIBINDINODE_LIBRARIES "/home/jodier/workspace/indi-node/build/libindi-node.a")

########################################################################################################################

set(SOURCE_FILES
    {'\n    '.join(fileList)}
    ./src/glue.c
    ./src/main.c
)

########################################################################################################################

add_executable({descr['nodeName'].lower()} ${{SOURCE_FILES}})

target_include_directories({descr['nodeName'].lower()} PRIVATE ${{LIBINDINODE_INCLUDE_DIR}})

target_link_libraries({descr['nodeName'].lower()} ${{LIBINDINODE_LIBRARIES}} ${{LIBXML2_LIBRARIES}})

########################################################################################################################
'''[1:]

    with open(os.path.join(driverPath, 'CMakeLists.txt'), 'wt') as f:

        f.write(template)

########################################################################################################################

def generateHeader(driverPath, descr):

    ####################################################################################################################

    ctorList = []
    dtorList = []
    vectorList = []

    for device in descr['devices'].values():

        ctorList.append(f'void device_{device['name'].lower()}_initialize();')
        dtorList.append(f'void device_{device['name'].lower()}_finalize();')

        for vector in device['vectors'].values():

            for vectorDef in vector['defs'].values():

                vectorList.append(f'extern indi_dict_t *vector_def_{device['name'].lower()}_{vector['name'].lower()}_{vectorDef['name'].lower()};')

            vectorList.append(f'extern indi_dict_t *vector_{device['name'].lower()}_{vector['name'].lower()};')

    ####################################################################################################################

    template = f'''
/* !!! AUTOGENERATED FILE !!! */
/*--------------------------------------------------------------------------------------------------------------------*/

#ifndef INDI_NODE_{descr['nodeName'].upper()}_H
#define INDI_NODE_{descr['nodeName'].upper()}_H

/*--------------------------------------------------------------------------------------------------------------------*/

#include <indi_node.h>

/*--------------------------------------------------------------------------------------------------------------------*/

{'\n'.join(vectorList)}

/*--------------------------------------------------------------------------------------------------------------------*/

{'\n'.join(ctorList)}

{'\n'.join(dtorList)}

/*--------------------------------------------------------------------------------------------------------------------*/

void indi_glue_initialize(void);

void indi_glue_finalize(void);

/*--------------------------------------------------------------------------------------------------------------------*/

#endif /* INDI_NODE_{descr['nodeName'].upper()}_H */

/*--------------------------------------------------------------------------------------------------------------------*/
'''[1:]

    with open(os.path.join(driverPath, 'src', 'internal.h'), 'wt') as f:

        f.write(template)

########################################################################################################################

def generateMain(driverPath, descr):

    ####################################################################################################################

    vectorList = []

    for device in descr['devices'].values():

        for vector in device['vectors'].values():

            vectorList.append(f'vector_{device['name'].lower()}_{vector['name'].lower()},')

    vectorList.append('NULL,')

    ####################################################################################################################

    template = f'''
/*--------------------------------------------------------------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include <signal.h>

#include "internal.h"

/*--------------------------------------------------------------------------------------------------------------------*/

static int volatile s_signo = 0;

static void signal_handler(int signo)
{{
    s_signo = signo;
}}

/*--------------------------------------------------------------------------------------------------------------------*/

int main()
{{
    /*----------------------------------------------------------------------------------------------------------------*/

    indi_memory_initialize();

    /*----------------------------------------------------------------------------------------------------------------*/

    if(indi_validation_initialize() == false)
    {{
        printf("Error initializing validation\\n");

        goto _err;
    }}

    /*----------------------------------------------------------------------------------------------------------------*/

    indi_glue_initialize();

    /*----------------------------------------------------------------------------------------------------------------*/

    indi_dict_t *vector_list[] = {{
        {'\n        '.join(vectorList)}
    }};

    /*----------------------------------------------------------------------------------------------------------------*/

    signal(SIGINT, signal_handler);
    signal(SIGTERM, signal_handler);

    indi_node_t *node = indi_node_initialize(
        {('"' + descr['tcpURI'] + '"') if descr['enableTCP'] else 'NULL'},
        {('"' + descr['mqttURI'] + '"') if descr['enableMQTT'] else 'NULL'},
        {('"' + descr['mqttUsername'] + '"') if descr['enableMQTT'] else 'NULL'},
        {('"' + descr['mqttPassword'] + '"') if descr['enableMQTT'] else 'NULL'},
        "{descr['nodeName']}",
        vector_list,
        3000,
        true,
        true
    );

    while(s_signo == 0)
    {{
        indi_node_pool(node, {descr['nodeTimeout']});
    }}

    indi_node_free(node, true);

    /*----------------------------------------------------------------------------------------------------------------*/

    indi_glue_finalize();

    /*----------------------------------------------------------------------------------------------------------------*/

    if(indi_validation_finalize() == false)
    {{
        printf("Error finalizing validation\\n");

        goto _err;
    }}

    /*----------------------------------------------------------------------------------------------------------------*/

_err:
    indi_memory_finalize();

    /*----------------------------------------------------------------------------------------------------------------*/

    printf("Bye.\\n");

    /*----------------------------------------------------------------------------------------------------------------*/

    return 0;
}}

/*--------------------------------------------------------------------------------------------------------------------*/
'''[1:]

    with open(os.path.join(driverPath, 'src', 'main.c'), 'wt') as f:

        f.write(template)

########################################################################################################################

def generateDevices(driverPath, descr):

    ctorList = []
    dtorList = []

    vectorList1 = []
    vectorList2 = []

    ####################################################################################################################

    for device in descr['devices'].values():

        vectorDefList1 = []
        vectorDefList2 = []

        ################################################################################################################

        ctorList.append(f'device_{device['name'].lower()}_initialize();')
        dtorList.append(f'device_{device['name'].lower()}_finalize();')

        ################################################################################################################

        for vector in device['vectors'].values():

            for vectorDef in vector['defs'].values():

                ########################################################################################################

                vectorList1.append(f'indi_dict_t *vector_def_{device['name'].lower()}_{vector['name'].lower()}_{vectorDef['name'].lower()} = NULL;')

                vectorDefList1.append(f'vector_def_{device['name'].lower()}_{vector['name'].lower()}_{vectorDef['name'].lower()},')

                ########################################################################################################
                # NUMBER                                                                                               #
                ########################################################################################################

                if vector['type'] == 'number':

                    vectorDefList2.append(f'vector_def_{device['name'].lower()}_{vector['name'].lower()}_{vectorDef['name'].lower()} = indi_number_def_new("{vectorDef['name']}", "{vectorDef['label']}", "{vectorDef['format']}", {vectorDef['min']}, {vectorDef['max']}, {vectorDef['step']}, {vectorDef['value']});')

                ########################################################################################################
                # TEXT                                                                                                 #
                ########################################################################################################

                if vector['type'] == 'text':

                    vectorDefList2.append(f'vector_def_{device['name'].lower()}_{vector['name'].lower()}_{vectorDef['name'].lower()} = indi_text_def_new("{vectorDef['name']}", "{vectorDef['label']}", "{vectorDef['value']}");')

                ########################################################################################################
                # LIGHT                                                                                                #
                ########################################################################################################

                if vector['type'] == 'light':

                    vectorDefList2.append(f'vector_def_{device['name'].lower()}_{vector['name'].lower()}_{vectorDef['name'].lower()} = indi_light_def_new("{vectorDef['name']}", "{vectorDef['label']}", {vectorDef['value']});')

                ########################################################################################################
                # SWITCH                                                                                               #
                ########################################################################################################

                if vector['type'] == 'switch':

                    vectorDefList2.append(f'vector_def_{device['name'].lower()}_{vector['name'].lower()}_{vectorDef['name'].lower()} = indi_switch_def_new("{vectorDef['name']}", "{vectorDef['label']}", {vectorDef['value']});')

                ########################################################################################################
                # BLOB                                                                                                 #
                ########################################################################################################

                if vector['type'] == 'blob':

                    vectorDefList2.append(f'vector_def_{device['name'].lower()}_{vector['name'].lower()}_{vectorDef['name'].lower()} = indi_blob_def_new("{vectorDef['name']}", "{vectorDef['label']}", {vectorDef['value']});')

            ############################################################################################################

            vectorList1.append(f'indi_dict_t *vector_{device['name'].lower()}_{vector['name'].lower()} = NULL;')

            vectorDefList1.append('NULL,')

            ############################################################################################################
            # OPTIONS AND DEFINITIONS                                                                                  #
            ############################################################################################################

            optionList = []

            if vector['label']:
                optionList.append(f'.label = "{vector['label']}"')
            if vector['group']:
                optionList.append(f'.group = "{vector['group']}"')
            if vector['group']:
                optionList.append(f'.timeout = {vector['timeout']}')
            if vector['message']:
                optionList.append(f'.message = {vector['message']}')

            optionList.append('/**/')

            ############################################################################################################

            defsAndOpts = f'''
{'\n    '.join(vectorDefList2)}

    indi_dict_t *{device['name'].lower()}_{vector['name'].lower()}_defs[] = {{
        {'\n        '.join(vectorDefList1)}
    }};

    indi_opts_t {device['name'].lower()}_{vector['name'].lower()}_opts = {{
        {'\n        '.join(optionList)}
    }};
'''

            ############################################################################################################
            # VECTOR                                                                                                   #
            ############################################################################################################

            vectorList2.append(f'/* VECTOR {device['name'].upper()}::{vector['name'].upper()} */\n')

            ############################################################################################################
            # NUMBER                                                                                                   #
            ############################################################################################################

            if vector['type'] == 'number':

                vectorList2.append(f'''{defsAndOpts}
    vector_{device['name'].lower()}_{vector['name'].lower()} = indi_number_def_vector_new(
        "{device['name']}",
        "{vector['name']}",
        {vector['state']},
        {vector['perm']},
        {device['name'].lower()}_{vector['name'].lower()}_defs,
        &{device['name'].lower()}_{vector['name'].lower()}_opts
    );
'''[1:])

            ############################################################################################################
            # TEXT                                                                                                     #
            ############################################################################################################

            elif vector['type'] == 'text':

                vectorList2.append(f'''{defsAndOpts}
    vector_{device['name'].lower()}_{vector['name'].lower()} = indi_text_def_vector_new(
        "{device['name']}",
        "{vector['name']}",
        {vector['state']},
        {vector['perm']},
        {device['name'].lower()}_{vector['name'].lower()}_defs,
        &{device['name'].lower()}_{vector['name'].lower()}_opts
    );
'''[1:])

            ############################################################################################################
            # LIGHT                                                                                                    #
            ############################################################################################################

            elif vector['type'] == 'light':

                vectorList2.append(f'''{defsAndOpts}
    vector_{device['name'].lower()}_{vector['name'].lower()} = indi_light_def_vector_new(
        "{device['name']}",
        "{vector['name']}",
        {vector['state']},
        {device['name'].lower()}_{vector['name'].lower()}_defs,
        &{device['name'].lower()}_{vector['name'].lower()}_opts
    );
'''[1:])

            ############################################################################################################
            # SWITCH                                                                                                   #
            ############################################################################################################

            elif vector['type'] == 'switch':

                vectorList2.append(f'''{defsAndOpts}
    vector_{device['name'].lower()}_{vector['name'].lower()} = indi_switch_def_vector_new(
        "{device['name']}",
        "{vector['name']}",
        {vector['state']},
        {vector['perm']},
        {vector['rule']},
        {device['name'].lower()}_{vector['name'].lower()}_defs,
        &{device['name'].lower()}_{vector['name'].lower()}_opts
    );
'''[1:])

            ############################################################################################################
            # BLOB                                                                                                     #
            ############################################################################################################

            elif vector['type'] == 'blob':

                vectorList2.append(f'''{defsAndOpts}
    vector_{device['name'].lower()}_{vector['name'].lower()} = indi_blob_def_vector_new(
        "{device['name']}",
        "{vector['name']}",
        {vector['state']},
        {vector['perm']},
        {device['name'].lower()}_{vector['name'].lower()}_defs,
        &{device['name'].lower()}_{vector['name'].lower()}_opts
    );
'''[1:])

        ################################################################################################################

        if device['disabled'] or vector['disabled']:

            vectorList2.append(f'vector_{device['name'].lower()}_{vector['name'].lower()}->base.flags |= INDI_FLAGS_XXXX_DISABLED;\n')

        ################################################################################################################

        template = f'''
/*--------------------------------------------------------------------------------------------------------------------*/

#include "internal.h"

/*--------------------------------------------------------------------------------------------------------------------*/

void device_{device['name'].lower()}_initialize(void)
{{
    /* TO BE IMPLEMENTED */
}}

/*--------------------------------------------------------------------------------------------------------------------*/

void device_{device['name'].lower()}_finalize(void)
{{
    /* TO BE IMPLEMENTED */
}}

/*--------------------------------------------------------------------------------------------------------------------*/
'''[1:]

        with open(os.path.join(driverPath, 'src', f'device_{device['name'].lower()}.c'), 'wt') as f:

            f.write(template)

    ####################################################################################################################

    template = f'''
/* !!! AUTOGENERATED FILE !!! */
/*--------------------------------------------------------------------------------------------------------------------*/

#include "internal.h"

/*--------------------------------------------------------------------------------------------------------------------*/

{'\n'.join(vectorList1)}

/*--------------------------------------------------------------------------------------------------------------------*/

void indi_glue_initialize(void)
{{
    /*----------------------------------------------------------------------------------------------------------------*/
    /* INITIALIZE VECTORS                                                                                             */
    /*----------------------------------------------------------------------------------------------------------------*/

    {'\n    '.join(vectorList2).rstrip()}

    /*----------------------------------------------------------------------------------------------------------------*/
    /* INITIALIZE HARDWARE                                                                                            */
    /*----------------------------------------------------------------------------------------------------------------*/

    {'\n    '.join(ctorList).rstrip()}

    /*----------------------------------------------------------------------------------------------------------------*/
}}

/*--------------------------------------------------------------------------------------------------------------------*/

void indi_glue_finalize(void)
{{
    /*----------------------------------------------------------------------------------------------------------------*/
    /* FINALIZE HARDWARE                                                                                              */
    /*----------------------------------------------------------------------------------------------------------------*/

    {'\n    '.join(dtorList).rstrip()}

    /*----------------------------------------------------------------------------------------------------------------*/
}}

/*--------------------------------------------------------------------------------------------------------------------*/
'''[1:]

    with open(os.path.join(driverPath, 'src', 'glue.c'), 'wt') as f:

        f.write(template)

########################################################################################################################

def main():

    ####################################################################################################################

    parser = argparse.ArgumentParser(description = 'Generate an INDI driver skeleton from a description file')

    parser.add_argument('--override', action = 'store_true', help = 'Override the output path')

    parser.add_argument('--output', type = str, default = '.', help = 'Skeleton output path')

    parser.add_argument('--descr', type = str, required = True, help = 'Driver description file')

    args = parser.parse_args()

    ####################################################################################################################

    try:

        with open(args.descr, 'rt') as f:

            descr = json.load(f)

    except IOError as e:

        return 1

    ####################################################################################################################

    driverPath = os.path.join(args.output, descr['nodeName'])

    if args.override and os.path.isdir(driverPath):

        shutil.rmtree(driverPath)

    ####################################################################################################################

    os.makedirs(os.path.join(driverPath, 'src'))

    ####################################################################################################################

    generateCMakeLists(driverPath, descr)

    generateHeader(driverPath, descr)

    generateMain(driverPath, descr)

    generateDevices(driverPath, descr)

    ####################################################################################################################

    return 0

########################################################################################################################

if __name__ == "__main__":

    sys.exit(main())

########################################################################################################################
